@page
@model VolleyMatchAnalisis.Pages.AnalizzaDati.IndexModel
@{
    Layout = "_Layout";

    int puntiTotali = 0;
    int puntiCasa = 0;
    int puntiFuori = 0;
    int puntiCasaSubiti = 0;
    int puntiFuoriSubiti = 0;

    if (Model.GareFiltrate != null)
    {
        foreach (var gara in Model.GareFiltrate)
        {
            var ris = gara.Ris?.Replace(" ", "").Trim();
            bool squadraGiocaInCasa = Model.FiltroSquadra == gara.SquadraA;
            bool squadraGiocaFuori = Model.FiltroSquadra == gara.SquadraB;

            // Calcolo punti classifica
            if (squadraGiocaInCasa)
            {
                if (ris == "3-0" || ris == "3-1")
                    puntiTotali += 3;
                else if (ris == "3-2")
                    puntiTotali += 2;
                else if (ris == "2-3")
                    puntiTotali += 1;
            }
            else if (squadraGiocaFuori)
            {
                if (ris == "0-3" || ris == "1-3")
                    puntiTotali += 3;
                else if (ris == "2-3")
                    puntiTotali += 2;
                else if (ris == "3-2")
                    puntiTotali += 1;
            }

            int sommaCasa = 0;
            int sommaFuori = 0;
            for (int i = 1; i <= 5; i++)
            {
                var propCasa = gara.GetType().GetProperty($"Parz_Squadra_A_{i}");
                var propFuori = gara.GetType().GetProperty($"Parz_Squadra_B_{i}");
                int valueCasa = 0;
                int valueFuori = 0;
                if (propCasa != null)
                {
                    int.TryParse((propCasa.GetValue(gara) ?? "0").ToString(), out valueCasa);
                    sommaCasa += valueCasa;
                }
                if (propFuori != null)
                {
                    int.TryParse((propFuori.GetValue(gara) ?? "0").ToString(), out valueFuori);
                    sommaFuori += valueFuori;
                }
            }
            // Punti realizzati e subiti nelle gare in casa
            if (squadraGiocaInCasa)
            {
                puntiCasa += sommaCasa;
                puntiCasaSubiti += sommaFuori;
            }
            // Punti realizzati e subiti nelle gare fuori casa
            else if (squadraGiocaFuori)
            {
                puntiFuori += sommaFuori;
                puntiFuoriSubiti += sommaCasa;
            }
        }
    }
}

<h2>Analizza Dati</h2>

<form method="get" style="margin-bottom:20px;">
    <label>Codice Campionato:</label>
    <select name="FiltroCodice">
        <option value="">-- Tutti --</option>
        @foreach (var cod in Model.CodiciCampionato)
        {
            <option value="@cod" @(cod == Model.FiltroCodice ? "selected" : "")>@cod</option>
        }
    </select>

    <label>Squadra:</label>
    <select name="FiltroSquadra">
        <option value="">-- Tutte --</option>
        @foreach (var sq in Model.Squadre)
        {
            <option value="@sq" @(sq == Model.FiltroSquadra ? "selected" : "")>@sq</option>
        }
    </select>

    <button type="submit">Esegui</button>
</form>

<!-- Spaziatura aggiuntiva tra tabella totali e elenco gare -->
<div style="height: 36px;"></div>
<!-- oppure <br /><br /> per riga vuota semplice -->

@if (Model.Analisi != null)
{
    var dati = Model.Analisi.Value;
    <table id="analisiTable" class="display" style="width:100%">
        <thead>
            <tr>
                <th>Gare Totali</th>
                <th>Vinte</th>
                <th>Perse</th>
                <th>Punti</th>
                <th>Punti Fatti Casa</th>
                <th>Punti Subiti Casa</th>
                <th>Punti Fatti Fuori</th>
                <th>Punti Subiti Fuori</th>
                <th>Vinte in Casa</th>
                <th>Vinte Fuori</th>
                <th>Set Vinti Scarto > 5</th>
                <th>Set Persi Scarto > 5</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@dati.tot</td>
                <td class="vittoria">@dati.vinte</td>
                <td class="sconfitta">@dati.perse</td>
                <td>@puntiTotali</td>
                <td>@puntiCasa</td>
                <td>@puntiCasaSubiti</td>
                <td>@puntiFuori</td>
                <td>@puntiFuoriSubiti</td>
                <td>@dati.vinteCasa</td>
                <td>@dati.vinteFuori</td>
                <td class="vittoria">@dati.vinteScarto</td>
                <td class="sconfitta">@dati.perseScarto</td>
            </tr>
        </tbody>
    </table>

    <!-- Spaziatura aggiuntiva tra tabella totali e elenco gare -->
    <div style="height: 36px;"></div>
    <!-- oppure <br /><br /> per riga vuota semplice -->

    @if (Model.GareFiltrate != null && Model.GareFiltrate.Any())
    {
        <h3>Elenco gare della squadra selezionata</h3>
        <table id="gareTable" class="display" style="margin-top:20px; width:100%;">
            <thead>
                <tr>
                    <th>Data</th>
                    <th>Squadra A</th>
                    <th>Squadra B</th>
                    <th>Risultato</th>
                    <th>Parziali</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var gara in Model.GareFiltrate)
                {
                    var ris = gara.Ris?.Replace(" ", "").Trim();
                    bool squadraAWin = ris == "3-0" || ris == "3-1" || ris == "3-2";
                    bool squadraBWin = ris == "0-3" || ris == "1-3" || ris == "2-3";

                    bool squadraSelezionataHaVinto =
                    (!string.IsNullOrEmpty(Model.FiltroSquadra) && (
                    (Model.FiltroSquadra == gara.SquadraA && squadraAWin) ||
                    (Model.FiltroSquadra == gara.SquadraB && squadraBWin)
                    ));

                    bool squadraSelezionataHaPerso =
                    (!string.IsNullOrEmpty(Model.FiltroSquadra) && (
                    (Model.FiltroSquadra == gara.SquadraA && squadraBWin) ||
                    (Model.FiltroSquadra == gara.SquadraB && squadraAWin)
                    ));

                    string classeRis = squadraSelezionataHaVinto ? "vittoria"
                    : squadraSelezionataHaPerso ? "sconfitta"
                    : "";

                    <tr>
                        <td>@gara.Data.ToShortDateString()</td>
                        <td>@gara.SquadraA</td>
                        <td>@gara.SquadraB</td>
                        <td class="@classeRis">@gara.Ris</td>
                        <td>@gara.Parziali</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (Model.GareFiltrate != null)
    {
        <p><em>Nessuna gara trovata per la combinazione selezionata.</em></p>
    }
}
else if (!string.IsNullOrEmpty(Model.FiltroCodice) && !string.IsNullOrEmpty(Model.FiltroSquadra))
{
    <p><em>Nessun dato disponibile per la combinazione selezionata.</em></p>
}

@section Scripts {
    <script>
        // Plugin per ordinamento date EU (gg/mm/yyyy)
        $.fn.dataTable.ext.type.order['date-eu-pre'] = function (date) {
            if (!date) return 0;
            var dateParts = date.split('/');
            return Date.parse(dateParts[2] + '-' + dateParts[1] + '-' + dateParts[0]);
        };

        $(document).ready(function () {
            $('#analisiTable').DataTable({
                paging: false,
                searching: false,
                ordering: false,
                info: false
            });
            $('#gareTable').DataTable({
                paging: true,
                pageLength: 25,
                searching: true,
                ordering: true,
                order: [[0, "asc"]],
                columnDefs: [
                    { type: 'date-eu', targets: 0 }
                ],
                language: {
                    url: "//cdn.datatables.net/plug-ins/1.13.6/i18n/it-IT.json"
                }
            });
        });
    </script>
}